소요시간: 40분
<!-- 입력받은 행렬안에 상하좌우 4개의 방향에 있는 값보다 큰 값을 봉우리라 칭하고 그 봉우리의 갯수를 구한다. 행렬의 테두리는 0으로 둘러 쌓여있다고 가정한다. -->
<html>
    <head>
        <meta charset="UTF-8">
        <title>출력결과</title>
    </head>
    <body>
        <script>
            function solution(a){
                let answer=0;
                let x=[-1,0,1,0];
                let y=[0,-1,0,1];
                let n = a.length;
                let boolean = 1;
                for(var i=0; i<n;i++){
                    for(var j=0;j<n;j++){
                        boolean=1;
                        for(var k=0;k<4;k++){
                            let px = i+x[k];
                            let py = j+y[k];
                            if(0<=px&&px<n&&0<=py&&py<n&&a[i][j]<a[px][py]){
                            boolean=0;
                            break;
                            }
                        }
                        if(boolean==1){
                            answer++
                        }
                    }
                }
                return answer;
            }
            
            
            let a=[[5, 3, 7, 2, 3], 
                    [3, 7, 1, 6, 1],
                    [7, 2, 5, 3, 4],
                    [4, 3, 6, 4, 1],
                    [8, 7, 3, 5, 2]];
            console.log(solution(a));
        </script>
    </body>
</html>
<!--접근법 :  삼중 for문을 돌려서 i를 이용해서 행을  j를 이용해서 열을 바꿔주고
 x,y,k를 이용하여 지정된 값을 상하좌우 값들과 비교해준다. 그리고 boolean값이 1이면 봉우리 개수가 카운트되고 0이면 다음 값을 지정해주도록 함수를 만들었다. 
그리고 px와 py가 0보다 크다는 조건식을 넣어서 행렬의 테두리가 0으로 둘러쌓여있다는 조건을 만족시켜줬다.-->
<!-- 개선점 : 코드를 설계하는데 오랜시간이 걸렸다.-->
<!-- 노트 : x([-1,0,1,0]), y([0,-1,0,1] 배열을 이용해서 상하좌우 값을 선택할 수 있다.-->