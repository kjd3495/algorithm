<!--작성일: 2021-10-28
소요시간: 40분-->
<!--반에서 더 잘하는 학생이 자신보다 못하는 학생의 멘토가 되는 시스템을 만들기위해서
    m번의 테스트를 진행하고 m번의 테스트에서 모두 등수가 멘티 학생보다 높은 학생을 멘토로 정하려고 한다. 테스트의 횟수는 행렬의 행의 개수이다.
    반 학생들로 몇 쌍의 멘토, 멘티를 짝지을 수 있는지 출력하는 문제이다. 입력받은 행렬의 열의 인덱스(0부터 1등으로 계산)를 
    등수로 하고 행렬안에 입력된 1,2,3,4이 반학생을 나타낸다. ex)첫행의 첫열에 3번학생이 있으면 첫번째 테스트에서 3번학생이 1등을 한 것 이다. -->
<html>
    <head>
        <meta charset="UTF-8">
        <title>출력결과</title>
    </head>
    <body>
        <script>
    function solution(arr){  
                let answer=0;
                let n = arr[0].length;
                let m = arr.length;
                for(let i=1; i<n+1; i++){
                    for(let j=1; j<n+1; j++){
                        let cnt=0;
                        for( let k=0; k<m; k++){
                            let pi=0;
                            let pj=0;
                            for(let s=0; s<n; s++){
                                if(arr[k][s]===i)pi=s;
                                if(arr[k][s]===j)pj=s;
                            }
                            if(pi<pj){
                                cnt++;
                            }
                        }
                        if(m===cnt){
                        answer++;
                        }
                    }
                
                    }
                return answer;
                
            }
            let arr= [[3,4,1,2],
                      [4,3,2,1],
                      [3,1,4,2]]
            console.log(solution(arr));

        </script>
    </body>
</html>

<!-- 접근법: 해당 문제는 완전탐색을 통해서 (멘토,멘티) 짝이 가능한 모든 경우의 수를 출력하는 문제이다.
4중 for문을 통해서 모든 학생들을 짝지어서 m번의 테스트에 대한 모든 성적을 비교한 후 (멘토,멘티)가 가능한 모든 경우의 수를 출력한다.-->
<!-- 노트: 행렬을 완전탐색을 하기위해 4중 for 문과 for문이 끝나면 초기화 되는 변수를 선언하여 사용했다.-->